<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure News</title>
    <link>http://igeldev.github.io/clojure-site-russian</link>
    <atom:link href="http://igeldev.github.io/clojure-site-russian/feed.xml" rel="self" type="application/rss+xml" />
    <description>Clojure News</description>
    <language>en-gb</language>
    <pubDate>Wed, 17 May 2017 17:43:40 +0700</pubDate>
    <lastBuildDate>Wed, 17 May 2017 17:43:40 +0700</lastBuildDate>
    <item>
      <title>State of Clojure 2015 survey results</title>
      <link>http://igeldev.github.io/clojure-site-russian/news/2016/01/28/state-of-clojure-2015.html</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0600</pubDate>
      <guid isPermaLink="false">news/2016/01/28/state-of-clojure-2015.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out the State of Clojure 2015 survey results here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cognitect.com/blog/2016/1/28/state-of-clojure-2015-survey-results&quot; class=&quot;bare&quot;&gt;http://blog.cognitect.com/blog/2016/1/28/state-of-clojure-2015-survey-results&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for responding - it&amp;#8217;s great to see the community growing and doing great things!&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Clojure 1.8 is now available</title>
      <link>http://igeldev.github.io/clojure-site-russian/news/2016/01/19/clojure18.html</link>
      <pubDate>Tue, 19 Jan 2016 00:00:00 +0600</pubDate>
      <guid isPermaLink="false">news/2016/01/19/clojure18.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the new features for 1.8 are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More string functions in &lt;a href=&quot;http://clojure.github.io/clojure/branch-master/clojure.string-api.html&quot;&gt;clojure.string&lt;/a&gt; (portable to ClojureScript): index-of, last-index-of, starts-with?, ends-with?, includes?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compiler &lt;a href=&quot;xref/../../../../../reference/compilation#directlinking&quot;&gt;direct linking&lt;/a&gt; - improves performance and startup time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;xref/../../../../../reference/repl_and_main#_launching_a_socket_server&quot;&gt;Socket server&lt;/a&gt; and socket server REPL - adds the ability to allow remote Clojure REPL connections&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, see the &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/changes.md&quot;&gt;complete list&lt;/a&gt; of all changes since Clojure 1.7 for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_contributors&quot;&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to all of those who contributed to Clojure 1.8 (first time contributors in bold):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alexander Yakushev&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alex Miller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alex Redington&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alf Kristian Stoyle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ambrose Bonnaire-Sergeant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Andrew Rosa&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Andy Fingerhut&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Andy Sheldon&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Aspasia Beneti&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blake West&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bozhidar Batsov&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Daniel Compton&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Erik Assum&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gary Fredericks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ghadi Shayban&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gordon Syme&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Howard Lewis Ship&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jean Niklas L&amp;#8217;orange&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jeremy Heiler&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jonas Enlund&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jozef Wagner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Karsten Schmidt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kevin Downey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mark Simpson&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Michael Blume&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nahuel Greco&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nicola Mometto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nikita Prokopov&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nola Stowe&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ragnar Dahl√©n&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ralf Schmitt&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rich Hickey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Russ Olsen&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Shogo Ohta&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steve Miner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stuart Halloway&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timothy Baldridge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tsutomu Yano&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Yanxiang Lou&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Welcome to the new clojure.org!</title>
      <link>http://igeldev.github.io/clojure-site-russian/news/2016/01/14/clojure-org-live.html</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0600</pubDate>
      <guid isPermaLink="false">news/2016/01/14/clojure-org-live.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are reading this on the newly updated Clojure web site! The first thing you will notice is that everything got a fresh coat of paint and the design is a big step forward. Essentially all of the old page content has been moved over to the new site, however some things are in new locations - in virtually all of those cases, you should find redirects taking you to the new location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also several new things on the site:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;xref/../../../../news&quot;&gt;News&lt;/a&gt; - periodically we will post topical news here about new features, releases, or other things of note - these also appear as links on the home page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;xref/../../../../../community/events&quot;&gt;Events&lt;/a&gt; - there is now a page for each upcoming Clojure event, also with links on the home page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;xref/../../../../../guides&quot;&gt;Guides&lt;/a&gt; - a new section for building out community guides and tutorials&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most importantly, all of the site content is stored in a &lt;a href=&quot;https://github.com/clojure/clojure-site&quot;&gt;repository&lt;/a&gt; and open for pull requests from contributors with a signed contributor agreement. If you are interested in adding or changing content, please check out the page on &lt;a href=&quot;xref/../../../../../community/contributing_site&quot;&gt;site contributions&lt;/a&gt; and the current &lt;a href=&quot;https://github.com/clojure/clojure-site/issues&quot;&gt;issues&lt;/a&gt; list.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Clojure 1.7 is now available</title>
      <link>http://igeldev.github.io/clojure-site-russian/news/2015/06/30/clojure-17.html</link>
      <pubDate>Tue, 30 Jun 2015 00:00:00 +0600</pubDate>
      <guid isPermaLink="false">news/2015/06/30/clojure-17.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are pleased to announce the release of Clojure 1.7. The two headline features for 1.7 are transducers and reader conditionals. Also see the &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/changes.md&quot;&gt;complete list&lt;/a&gt; of all changes since Clojure 1.6 for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_transducers&quot;&gt;Transducers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;xref/../../../../../../reference/transducers&quot;&gt;Transducers&lt;/a&gt; are composable algorithmic transformations. They are independent from the context of their input and output sources and specify only the essence of the transformation in terms of an individual element. Because transducers are decoupled from input or output sources, they can be used in many different processes - collections, streams, channels, observables, etc. Transducers compose directly, without awareness of input or creation of intermediate aggregates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many existing sequence functions now have a new arity (one fewer argument than before). This arity will return a transducer that represents the same logic but is independent of lazy sequence processing. Functions included are: map, mapcat, filter, remove, take, take-while, drop, drop-while, take-nth, replace, partition-by, partition-all, keep, keep-indexed, map-indexed, distinct, and interpose. Additionally some new transducer functions have been added: cat, dedupe, and random-sample.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transducers can be used in several new or existing contexts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;into - to collect the results of applying a transducer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sequence - to incrementally compute the result of a transducer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transduce - to immediately compute the result of a transducer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eduction - to delay computation and recompute each time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;core.async - to apply a transducer while values traverse a channel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_portable_clojure_and_reader_conditionals&quot;&gt;Portable Clojure and Reader Conditionals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is now common to see a library or application targeting multiple Clojure platforms with a single codebase. Clojure 1.7 introduces a new extension (.cljc) for files that can be loaded by Clojure and ClojureScript (and other Clojure platforms).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There will often be some parts of the code that vary between platforms. The primary mechanism for dealing with platform-specific code is to isolate that code into a minimal set of namespaces and then provide platform-specific versions (.clj/.class or .cljs) of those namespaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To support cases where is not feasible to isolate the varying parts of the code, or where the code is mostly portable with only small platform-specific parts, 1.7 provides &lt;a href=&quot;xref/../../../../../../reference/reader#_reader_conditionals&quot;&gt;Reader Conditionals&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reader conditionals are a new reader form that is only allowed in portable cljc files. A reader conditional expression is similar to a cond in that it specifies alternating platform identifiers and expressions. Each platform is checked in turn until a match is found and the expression is read. All expressions not selected are read but skipped. A final :default fallthrough can be provided. If no expressions are matched, the reader conditional will read nothing. The reader conditional splicing form takes a sequential expression and splices the result into the surrounding code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_contributors&quot;&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to all of those who contributed patches to Clojure 1.7:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Timothy Baldridge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bozhidar Batsov&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brandon Bloom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Michael Blume&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ambrose Bonnaire-Sergeant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aaron Cohen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pepijn de Vos&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Andy Fingerhut&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gary Fredricks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Daniel Solano G√≥mez&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stuart Halloway&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rich Hickey&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immo Heikkinen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Andrei Kleschinsky&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Howard Lewis Ship&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alex Miller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steve Miner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nicola Mometto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tomasz Nurkiewicz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ghadi Shayban&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paul Stadig&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Luke VanderHart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jozef Wagner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Devin Walters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jason Wolfe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steven Yi&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, continued thanks to the total list of contributors from all releases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Transducers are Coming</title>
      <link>http://igeldev.github.io/clojure-site-russian/news/2014/08/06/transducers-are-coming.html</link>
      <pubDate>Wed, 6 Aug 2014 00:00:00 +0700</pubDate>
      <guid isPermaLink="false">news/2014/08/06/transducers-are-coming.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts, and they&amp;#8217;re coming to Clojure core and core.async.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two years ago, in a &lt;a href=&quot;http://clojure.com/blog/2012/05/15/anatomy-of-reducer.html&quot;&gt;blog post describing how reducers work&lt;/a&gt;, I described the reducing function transformers on which they were based, and provided explicit examples like &lt;code&gt;mapping&lt;/code&gt;, &lt;code&gt;filtering&lt;/code&gt; and &lt;code&gt;mapcatting&lt;/code&gt;. Because the reducers library intends to deliver an API with the same &apos;shape&apos; as existing sequence function APIs, these transformers were never exposed a la carte, instead being encapsulated by the macrology of reducers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In working recently on providing algorithmic combinators for core.async, I became more and more convinced of the superiority of reducing function transformers over channel&amp;#8594;channel functions for algorithmic transformation. In fact, I think they are a better way to do many things for which we normally create bespoke replicas of map, filter etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, reducing function transformers are getting a name - &lt;strong&gt;transducers&lt;/strong&gt;, and first-class support in Clojure core and core.async.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_a_transducer&quot;&gt;What&amp;#8217;s a Transducer?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To recap that earlier post:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A reducing function is just the kind of function you&amp;#8217;d pass to &lt;code&gt;reduce&lt;/code&gt; - it takes a result so far and a new input and returns the next result-so-far. In the context of transducers it&amp;#8217;s best to think about this most generally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;;;reducing function signature
whatever, input -&amp;gt; whatever&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and a transducer is a function that takes one reducing function and returns another:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;;;transducer signature
(whatever, input -&amp;gt; whatever) -&amp;gt; (whatever, input -&amp;gt; whatever)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary power of transducers comes from their fundamental decoupling - they don&amp;#8217;t care (or know about):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the &apos;job&apos; being done (what the reducing function does)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the context of use (what &apos;whatever&apos; is)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the source of inputs (where input comes from).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other source of power comes from the fact that transducers compose using ordinary function composition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reducers library leverages transducers&apos; decoupling from the job, the representation, and the source of inputs to accomplish parallel reduction. But transducers can also be used for:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a la carte laziness&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transformations during collection building&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;collection/iteration/laziness-free transforming reductions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;channel transformations, event notifications and more.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of this is coming to Clojure core and core.async.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_stuff&quot;&gt;New stuff&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concretely, most of the core sequence functions are gaining a new arity, one shorter than their current shortest, which elides the final collection source argument. This arity will return a transducer that represents the same logic, independent of lazy sequence processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;;;look Ma, no collection!
(map f)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;returns a &apos;mapping&apos; transducer. filter et al get similar support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can build a &apos;stack&apos; of transducers using ordinary function composition (comp):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def xform (comp (map inc) (filter even?)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might notice the similarity between the above comp and a call to &amp;#8594;&amp;gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(-&amp;gt;&amp;gt; aseq (map inc) (filter even?))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way to think of transducers is like &amp;#8594;&amp;gt; but independent of the job (lazy sequence creation) and the source of inputs (aseq).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_transducers_in_action&quot;&gt;Transducers in action&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you&amp;#8217;ve got a transducer, what can you do with it? &lt;em&gt;&lt;strong&gt;An open set of things.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, given the above transducer and some data in a vector, you can:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;lazily transform the data (one lazy sequence, not three as with composed sequence functions)&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(sequence xform data)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reduce with a transformation (no laziness, just a loop)&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(transduce xform + 0 data)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;build one collection from a transformation of another, again no laziness&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(into [] xform data)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;create a recipe for a transformation, which can be subsequently sequenced, iterated or reduced&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(iteration xform data)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;or use the same transducer to transform everything that goes through a channel&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(chan 1 xform)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The latter demonstrates the corresponding new capability of core.async channels - they can take transducers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post is just to serve as a heads up on what the ongoing work is about. There will be more explanations, tutorials and derivations to follow, here and elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m excited about transducers and the power they bring, and I hope you are too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rich&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Clojure core.async Channels</title>
      <link>http://igeldev.github.io/clojure-site-russian/news/2013/06/28/clojure-clore-async-channels.html</link>
      <pubDate>Fri, 28 Jun 2013 00:00:00 +0700</pubDate>
      <guid isPermaLink="false">news/2013/06/28/clojure-clore-async-channels.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/core.async&quot;&gt;core.async&lt;/a&gt; is a new contrib library for Clojure that adds support for asynchronous programming using channels.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_rationale&quot;&gt;Rationale&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There comes a time in all good programs when components or subsystems must stop communicating directly with one another. This is often achieved via the introduction of queues between the producers of data and the consumers/processors of that data. This architectural indirection ensures that important decisions can be made with some degree of independence, and leads to systems that are easier to understand, manage, monitor and change, and make better use of computational resources, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the JVM, the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html&quot;&gt;java.util.concurrent&lt;/a&gt; package provides some good concurrent blocking queues, and they are a viable and popular choice for Clojure programs. However, in order to use the queues one must dedicate one or more actual threads to their consumption. Per-thread stack allocation and task-switching overheads limit the number of threads that can be used in practice. Another limitation of j.u.c. queues is there is no way to block waiting on a set of alternatives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On JavaScript engines, there are no threads and no queues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thread overheads or lack of threads often cause people to move to systems based upon events/callbacks, in the pursuit of greater efficiency (often under the misnomer &apos;scalability&apos;, which doesn&amp;#8217;t apply since you can&amp;#8217;t scale a single machine). Events complect communication and flow of control. While there are various mechanisms to make events/callbacks cleaner (FRP, Rx/Observables) they don&amp;#8217;t change their fundamental nature, which is that upon an event an arbitrary amount of other code is run, possibly on the same thread, leading to admonitions such as &quot;don&amp;#8217;t do too much work in your handler&quot;, and phrases like &quot;callback hell&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The objectives of core.async are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To provide facilities for independent threads of activity, communicating via queue-like &lt;em&gt;channels&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To support both real threads and shared use of thread pools (in any combination), as well as ClojureScript on JS engines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To build upon the work done on CSP and its derivatives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is our hope that async channels will greatly simplify efficient server-side Clojure programs, and offer simpler and more robust techniques for front-end programming in ClojureScript.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_history&quot;&gt;History&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The roots of this style go back at least as far as &lt;a href=&quot;http://en.wikipedia.org/wiki/Communicating_sequential_processes&quot;&gt;Hoare&amp;#8217;s Communicating Sequential Processes (CSP)&lt;/a&gt;, followed by realizations and extensions in e.g. &lt;a href=&quot;http://en.wikipedia.org/wiki/Occam_programming_language&quot;&gt;occam&lt;/a&gt;, &lt;a href=&quot;http://www.cs.kent.ac.uk/projects/ofa/jcsp/&quot;&gt;Java CSP&lt;/a&gt; and the &lt;a href=&quot;http://golang.org/&quot;&gt;Go programming language&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In modern incarnations, the notion of a channel becomes first class, and in doing so provides us the indirection and independence we seek.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A key characteristic of channels is that they are blocking. In the most primitive form, an unbuffered channel acts as a rendezvous, any reader will await a writer and vice-versa. Buffering can be introduced, but unbounded buffering is discouraged, as bounded buffering with blocking can be an important tool coordinating pacing and back pressure, ensuring a system doesn&amp;#8217;t take on more work than it can achieve.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_details&quot;&gt;Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_just_a_library&quot;&gt;Just a library&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;core.async&lt;/strong&gt; is a library. It doesn&amp;#8217;t modify Clojure. It is designed to support Clojure 1.5+.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_creating_channels&quot;&gt;Creating channels&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can create a channel with the &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/chan&quot;&gt;chan&lt;/a&gt; function. This will return a channel that supports multiple writers and readers. By default, the channel is unbuffered, but you can supply a number to indicate a buffer size, or supply a buffer object created via &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/buffer&quot;&gt;buffer&lt;/a&gt;, &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/dropping-buffer&quot;&gt;dropping-buffer&lt;/a&gt; or &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/sliding-buffer&quot;&gt;sliding-buffer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fundamental operations on channels are putting and taking values. Both of those operations potentially block, but the nature of the blocking depends on the nature of the thread of control in which the operation is performed. core.async supports two kinds of threads of control - ordinary threads and IOC (inversion of control) &apos;threads&apos;. Ordinary threads can be created in any manner, but IOC threads are created via &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/go&quot;&gt;go blocks&lt;/a&gt;. Because JS does not have threads, only &lt;code&gt;go&lt;/code&gt; blocks and IOC threads are supported in ClojureScript.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_go_blocks_and_ioc_threads&quot;&gt;go blocks and IOC &apos;threads&apos;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;go&lt;/code&gt; is a macro that takes its body and examines it for any channel operations. It will turn the body into a state machine. Upon reaching any blocking operation, the state machine will be &apos;parked&apos; and the actual thread of control will be released. This approach is similar to that used in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx&quot;&gt;C# async&lt;/a&gt;. When the blocking operation completes, the code will be resumed (on a thread-pool thread, or the sole thread in a JS VM). In this way the inversion of control that normally leaks into the program itself with event/callback systems is encapsulated by the mechanism, and you are left with straightforward sequential code. It will also provide the illusion of threads, and more important, separable sequential subsystems, to ClojureScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary channel operations within go blocks are &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/%3E!&quot;&gt;&amp;gt;!&lt;/a&gt; (&lt;em&gt;put&lt;/em&gt;) and &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/&amp;lt;!&quot;&gt;&amp;lt;!&lt;/a&gt; (&lt;em&gt;take&lt;/em&gt;). The go block itself immediately returns a channel, on which it will eventually put the value of the last expression of the body (if non-nil), and then close.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_channel_on_ordinary_threads&quot;&gt;Channel on ordinary threads&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are analogous operations for use on ordinary threads - &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/%3E!!&quot;&gt;&amp;gt;!!&lt;/a&gt; (&lt;em&gt;put blocking&lt;/em&gt;) and &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/&amp;lt;!!&quot;&gt;&amp;lt;!!&lt;/a&gt; (&lt;em&gt;take blocking&lt;/em&gt;), which will block the thread on which they are called, until complete. While you can use these operations on threads created with e.g. future, there is also a macro, &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/thread&quot;&gt;thread&lt;/a&gt;, analogous to &lt;code&gt;go&lt;/code&gt;, that will launch a first-class thread and similarly return a channel, and should be preferred over &lt;code&gt;future&lt;/code&gt; for channel work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mixing_modes&quot;&gt;Mixing modes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can put on a channel from either flavor of &lt;code&gt;&amp;gt;!&lt;/code&gt;/&lt;code&gt;&amp;gt;!!&lt;/code&gt; and similarly take with either of &lt;code&gt;&amp;lt;!&lt;/code&gt;/&lt;code&gt;&amp;lt;&amp;lt;!&lt;/code&gt; in any combination, i.e. the channel is oblivious to the nature of the threads which use it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_alt&quot;&gt;alt&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is often desirable to be able to wait for any one (and only one) of a set of channel operations to complete. This powerful facility is made available through the &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/alts!&quot;&gt;alts!&lt;/a&gt; function (for use in &lt;code&gt;go&lt;/code&gt; blocks), and the analogous &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/alts!!&quot;&gt;alts!!&lt;/a&gt; (&lt;em&gt;alts blocking&lt;/em&gt;). If more than one operation is available to complete, one can be chosen at random or by priority (i.e. in the order they are supplied). There are corresponding &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/alt!&quot;&gt;alt!&lt;/a&gt; and &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/alt!!&quot;&gt;alt!!&lt;/a&gt; macros that combine the choice with conditional evaluation of expressions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_timeouts&quot;&gt;Timeouts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Timeouts are just channels that automatically close after a period of time. You can create one with the &lt;a href=&quot;http://clojure.github.io/core.async/#clojure.core.async/timeout&quot;&gt;timeout&lt;/a&gt; function, then just include the timeout in an &lt;code&gt;alt&lt;/code&gt; variant. A nice aspect of this is that timeouts can be shared between threads of control, e.g. in order to have a set of activities share a bound.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_value_of_values&quot;&gt;The value of values&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with STM, the pervasive use of persistent data structures offers particular benefits for CSP-style channels. In particular, it is always safe and efficient to put a Clojure data structure on a channel, without fear of its subsequent use by either the producer or consumer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_contrasting_go_language_channels&quot;&gt;Contrasting Go language channels&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;core.async has obvious similarities to Go channels. Some differences with Go are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All of the operations are expressions (not statements)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is a library, not syntax&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;alts!&lt;/code&gt; is a function (and supports a runtime-variable number of operations)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Priority is supported in &lt;code&gt;alt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, Clojure is hosted, i.e. we are bringing these facilities to existing platforms, not needing a custom runtime. The flip-side is we don&amp;#8217;t have the underpinnings we would with a custom runtime. Reaching existing platforms remains a core Clojure value proposition.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_whither_actors&quot;&gt;Whither actors?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I remain unenthusiastic about actors. They still couple the producer with the consumer. Yes, one can emulate or implement certain kinds of queues with actors (and, notably, people often do), but since any actor mechanism already incorporates a queue, it seems evident that queues are more primitive. It should be noted that Clojure&amp;#8217;s mechanisms for concurrent use of state remain viable, and channels are oriented towards the flow aspects of a system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_deadlocks&quot;&gt;Deadlocks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that, unlike other Clojure concurrency constructs, channels, like all communications, are subject to deadlocks, the simplest being waiting for a message that will never arrive, which must be dealt with manually via timeouts etc. CSP proper is amenable to certain kinds of automated correctness analysis. No work has been done on that front for core.async as yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also note that async channels are not intended for fine-grained computational parallelism, though you might see examples in that vein.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_future_directions&quot;&gt;Future directions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Networks channels and distribution are interesting areas for attention. We will also being doing performance tuning and refining the APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_team&quot;&gt;Team&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;d like to thank the team that helped bring core.async to life:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Timothy Baldridge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ghadi Shayban&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alex Miller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alex Redington&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sam Umbach&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And once again, Tom Faulhaber for his work on autodoc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_status&quot;&gt;Status&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the library is still in an early state , we are ready for people to start trying it out and giving us feedback. The CLJS port is still work in progress. Please have a look at the &lt;a href=&quot;https://github.com/clojure/core.async/tree/master/examples&quot;&gt;examples&lt;/a&gt;, which we will expand over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be noted that the protocols behind the implementation should still be considered an implementation detail for the time being, until we finish our exploratory work around network channels, which might impact their design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope that these async channels will help you build simpler and more robust programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rich&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Clojure Governance and How It Got That Way</title>
      <link>http://igeldev.github.io/clojure-site-russian/news/2012/02/17/clojure-governance.html</link>
      <pubDate>Fri, 17 Feb 2012 00:00:00 +0700</pubDate>
      <guid isPermaLink="false">news/2012/02/17/clojure-governance.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_enter_rich_with_parentheses&quot;&gt;Enter Rich, with Parentheses&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the beginning, there was a guy with an idea. That guy was Rich Hickey, and his idea was to combine the power of Lisp with the reach of a modern managed runtime. He started with &lt;a href=&quot;http://jfli.sourceforge.net/&quot;&gt;Jfli&lt;/a&gt;, embedding a JVM in Lispworks&apos; Common Lisp implementation. When that proved inadequate, he took a two-year sabbatical to write the compiler that would eventually become &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt;: a completely new Lisp for the JVM with language-level concurrency support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In late 2007, Rich Hickey presented Clojure at a meeting of the New York Lisp users&apos; group, &lt;a href=&quot;http://lispnyc.org/&quot;&gt;LispNYC&lt;/a&gt;. I was there, and I was so excited by what I saw that I wrote one of the &lt;a href=&quot;http://stuartsierra.com/2007/11/15/clojure-a-lisp-worth-talking-about&quot;&gt;first blog articles about Clojure&lt;/a&gt;. Three days later, I was asking questions about Java interop on the &lt;a href=&quot;http://groups.google.com/group/clojure&quot;&gt;Clojure mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those early days were fun, participating in heady discussions about fundamental language features like &lt;a href=&quot;http://groups.google.com/group/clojure/browse_thread/thread/3a76a052b419d4d1/d57ae6ad6efb0d4e?#d57ae6ad6efb0d4e&quot;&gt;nil vs. false&lt;/a&gt; and &lt;a href=&quot;http://groups.google.com/group/clojure/browse_thread/thread/8b2c8dc96b39ddd7/5237b9d3ab300df8&quot;&gt;argument order&lt;/a&gt;. It felt like the beginning of something genuinely new. The community was tiny, and Rich participated in almost every discussion on the mailing list or IRC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How times have changed. The Clojure mailing list has over five thousand members, and we just wrapped up the &lt;a href=&quot;http://clojure-conj.org/&quot;&gt;second international Clojure conference&lt;/a&gt; with nearly four hundred attendees. Google Groups tells me I&amp;#8217;ve racked up over a thousand posts on the mailing list, which is shocking to me. There are five books and counting about Clojure. People are building businesses and careers on it. Who would have guessed, in 2007, that we would be here in just four years?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_enter_second_stuart&quot;&gt;Enter Second Stuart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(That was a cheap shot. Hi, Stu! :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Summer of 2008, Stuart Halloway started &lt;a href=&quot;http://thinkrelevance.com/blog/2008/07/30/clojure.html&quot;&gt;blogging about Clojure&lt;/a&gt;. With his co-founder Justin Gehtland, Stuart H. had already &lt;a href=&quot;http://thinkrelevance.com/&quot;&gt;built a business&lt;/a&gt; helping big companies navigate from ponderous Java development to more agile practices and more expressive languages like Ruby. Stuart H. decided that Clojure was the &lt;a href=&quot;http://thinkrelevance.com/blog/2009/10/19/the-case-for-clojure.html&quot;&gt;next big thing&lt;/a&gt;. He wrote the &lt;a href=&quot;http://pragprog.com/book/shcloj/programming-clojure&quot;&gt;first book about Clojure&lt;/a&gt; (soon to get a &lt;a href=&quot;http://pragprog.com/book/shcloj2/programming-clojure&quot;&gt;2nd edition&lt;/a&gt;). When he and Rich met at the 2008 JVM Language Summit, they started a long conversation that would eventually become a partnership.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_clojure_contrib_the_beginning&quot;&gt;Clojure Contrib: The Beginning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Around the same mid-2008 time frame, &quot;clojure-contrib&quot; began its life as a Subversion repository where community members could share code. There were twelve committers and no rules, just a bunch of Clojure source files containing code that we found useful. I contributed str-utils, seq-utils, duck-streams, and later test-is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The growth of contrib eventually led to the need for some kind of library loading scheme more expressive than &lt;code&gt;load-file&lt;/code&gt;. I wrote a primitive &lt;code&gt;require&lt;/code&gt; function that took a file name argument and loaded it from the classpath. Steve Gilardi modified &lt;code&gt;require&lt;/code&gt; to take a namespace symbol instead of a file. I suggested &lt;code&gt;use&lt;/code&gt; as the shortcut for the common case of &lt;code&gt;require&lt;/code&gt; followed by &lt;code&gt;refer&lt;/code&gt;. This all happened fairly quickly, without a lot of consideration or planning, culminating in the &lt;code&gt;ns&lt;/code&gt; macro. The peculiarities of the &lt;code&gt;ns&lt;/code&gt; macro grew directly out of this work, so you can blame us for that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure-contrib also prompted a question that every open-source software project must grapple with: how to handle ownership. We&amp;#8217;d already &lt;a href=&quot;http://groups.google.com/group/clojure/browse_thread/thread/4eea23108b2ed46e/e69c92cd7be8826a&quot;&gt;gone through two licenses&lt;/a&gt;: the Common Public License and its successor, the Eclipse Public License.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rich &lt;a href=&quot;http://groups.google.com/group/clojure/browse_thread/thread/6de5840e5ab9abdf/306f63a87d34e5f1&quot;&gt;proposed a Clojure Contributor Agreement&lt;/a&gt; as a means to protect Clojure&amp;#8217;s future. The motivation for the CA was to make sure Clojure would always be open-source but never trapped by a particular license. The Clojure CA is a covenant between the contributor and Rich Hickey: the contributor assigns joint ownership of his contributions to Rich. In return, Rich promises that Clojure will always be available under an open-source license approved by the &lt;a href=&quot;http://www.fsf.org/&quot;&gt;FSF&lt;/a&gt; or the &lt;a href=&quot;http://www.opensource.org/&quot;&gt;OSI&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some open-source projects got stuck with the first license under which contributions were made. Under the CA, if the license ever needs to change again, there would be no obstacles and no need to get permission from every past contributor. Agreements like this have become standard practice for owners of large open-source projects like &lt;a href=&quot;http://www.eclipse.org/legal/committer_process/EclipseIndividualCommitterAgreementFinal.pdf&quot;&gt;Eclipse&lt;/a&gt;, &lt;a href=&quot;http://www.apache.org/licenses/icla.txt&quot;&gt;Apache&lt;/a&gt;, and &lt;a href=&quot;http://www.oracle.com/technetwork/community/oca-486395.html&quot;&gt;Oracle&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_clojure_core_and_new_contrib&quot;&gt;Clojure/core and &quot;New Contrib&quot;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2010 I left my cozy academic job and went to work for Relevance, where Stuart Halloway and Rich were discussing a strategic partnership that would eventually become &lt;a href=&quot;http://clojure.com/&quot;&gt;Clojure/core&lt;/a&gt;. So what is Clojure/core? It&amp;#8217;s a business initiative of Relevance (though not an independent business entity) to provide consulting, training, and development-for-hire services around Clojure. Rich Hickey is an advisor to Clojure/core, but not a Relevance employee.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Members of Clojure/core, of which I am one, have made a commitment to spend their &lt;a href=&quot;http://thinkrelevance.com/blog/2011/08/01/Friday-Update.html&quot;&gt;20% time&lt;/a&gt; supporting the Clojure ecosystem. Although Rich still personally reviews every patch for the language itself, the job of answering questions and organizing contributions from a 5000-member community is too big for one person, so Rich delegated that responsibility to Clojure/core.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first big issue Clojure/core had to confront was the distribution of clojure-contrib. With sixty-plus libraries in one binary release, it was already unwieldy. Since clojure-contrib releases were tied to Clojure language releases, which happened infrequently, development had stalled. There was also vast confusion about what, exactly, clojure-contrib was meant to be. Was it an essential component of the language, a nascent standard library, or a load of crap? (I was inclined to the latter view, especially with regard to my own contributions.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My attempts at &lt;a href=&quot;https://github.com/clojure/clojure-contrib/commit/a6a92b9b3d2bfd9a56e1e5e9cfba706d1aeeaae5&quot;&gt;modularizing clojure-contrib within a single Git repository&lt;/a&gt; failed to improve the situation. Eventually, we settled on the solution of separate Git repositories for each library. This was a huge amount of work: dozens of repositories to create and hundreds of files to move. Many of the contrib libraries were stagnant, their original authors lacking time to continue working on them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, almost a year later, the situation has stabilized: &lt;a href=&quot;http://dev.clojure.org/display/doc/Clojure%2BContrib&quot;&gt;28 libraries&lt;/a&gt;, each with its own Git repository, test suite, &lt;a href=&quot;http://build.clojure.org/&quot;&gt;continuous integration&lt;/a&gt;, and independent release cycle. The overall code quality is higher and development is moving forward again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was a painful transition for everyone, not least for those of us trying to manage it all and bear the brunt of the inevitable carping. On top of everything else, the whole process overlapped with the release of Clojure 1.3, the first release to break backwards-compatibility in noticeable ways (non-dynamic Vars as a default, long/double as default numeric types).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our technology choices for Clojure and &quot;new contrib&quot; ‚Äî GitHub, JIRA, Hudson, and Maven ‚Äî were driven by several concerns:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;to be first-class participants in the Java ecosystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to preserve the future-proof licensing structure of the CA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to give library developers freedom to develop/release on their own schedule&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to ensure changes are made only after a thorough review process&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last point was particularly important for patches to the Clojure language. Clojure is &lt;strong&gt;very&lt;/strong&gt; stable: since its first public release, implementation bugs have been rare and regressions almost nonexistent. Most reported bugs are edge cases in Java interop. But stability has a price: new features come more slowly. The majority of JIRA tickets on Clojure are really feature requests. Rich is extremely conservative about adding features to the language, and he has impressed this view on Clojure/core for the purpose of screening tickets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To take one prominent example, &lt;a href=&quot;http://groups.google.com/group/clojure/browse_thread/thread/aa57ab265f7474a/51bb53ca077154f8&quot;&gt;named arguments were discussed&lt;/a&gt; as far back as January 2008. Community members developed the &lt;a href=&quot;http://groups.google.com/group/clojure/browse_thread/thread/d4f5f04f6894c741/4d3051dc6604df5d&quot;&gt;defnk macro&lt;/a&gt; to facilitate writing functions with named arguments, and &lt;a href=&quot;http://groups.google.com/group/clojure/browse_thread/thread/de791a1a28659ea/6020c7db6bb74844&quot;&gt;lobbied to add it&lt;/a&gt; to Clojure. Finally, in March 2010, Rich made a &lt;a href=&quot;https://github.com/clojure/clojure/commit/29389970bcd41998359681d9a4a20ee391a1e07c&quot;&gt;one-line commit&lt;/a&gt; adding support for map destructuring from sequential collections. This gave the benefit of keyword-style parameters everywhere destructuring is supported, including function arguments. By waiting, and thinking, we got something better than defnk. If defnk had been accepted earlier, we might have been stuck with an inferior implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conversely, the decision to move some libraries into the language, notably my testing library, was probably premature. (Stuart Halloway accepts blame for that one. :) Some of the decisions I made in that library could use revisiting, but now clojure.test is what we&amp;#8217;re stuck with.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_clojure_dev_and_the_future&quot;&gt;Clojure/dev and the Future&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If there was one mistake that I personally made during the 1.3 migration, it was speaking as if Clojure/core &lt;strong&gt;owned&lt;/strong&gt; Clojure and clojure-contrib. We don&amp;#8217;t: Clojure is owned by Rich Hickey, and clojure-contrib is owned jointly by Rich Hickey and contributors. But we &lt;strong&gt;are&lt;/strong&gt; the appointed stewards (and Stuarts!) of the open-source Clojure ecosystem. In that role, we have to make decisions about what we choose to invest time in supporting. Given limited time, and following Rich&amp;#8217;s conservative position on new features, that decision is usually &quot;no.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a difficult position to be in. Most of Clojure/core&amp;#8217;s members come from the free-wheeling, fast-paced open-source world of Ruby on Rails. We really don&amp;#8217;t enjoy saying &quot;no&quot; all the time. But a conservative attitude toward new features is exactly the reason Clojure is so stable. Patches don&amp;#8217;t get into the language until they have been &lt;a href=&quot;http://dev.clojure.org/display/design/JIRA%2Bworkflow&quot;&gt;reviewed by at least three people&lt;/a&gt;, one of them Rich Hickey. New libraries don&amp;#8217;t get added to &lt;a href=&quot;http://dev.clojure.org/display/design/Clojure%2BContrib&quot;&gt;clojure-contrib&lt;/a&gt; without multiple mailing-list discussions. None of the new contrib libraries has reached the &lt;a href=&quot;http://dev.clojure.org/display/design/Contrib%2B1.0.0%2BReleases&quot;&gt;1.0.0 milestone&lt;/a&gt;, and probably won&amp;#8217;t for some time. These hurdles are not arbitrary; they are an attempt to guarantee that new additions to Clojure reflect the same consideration and careful design that Rich invested in the original implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what is clojure-contrib today? It&amp;#8217;s a curated set of libraries whose ownership and licensing is governed by the Clojure Contributor Agreement. It could also serve as a proving ground for new features in the language, but this does not imply that every contrib library will eventually make it into the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the expansion of contrib, we&amp;#8217;ve given name to another layer of organization: &lt;strong&gt;Clojure/dev&lt;/strong&gt;. Clojure/dev is the set of all people who have signed the Clojure Contributor Agreement. This entitles them to participate in discussions on the &lt;a href=&quot;http://groups.google.com/group/clojure-dev&quot;&gt;clojure-dev mailing list&lt;/a&gt;, submit patches on &lt;a href=&quot;http://dev.clojure.org/jira&quot;&gt;JIRA&lt;/a&gt;, and become committers on contrib libraries. Within Clojure/dev is the smaller set of people who have been tasked with screening Clojure language tickets. Clojure/core overlaps with both groups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/content/news/2012-02-17/clojure-community-layers.png&quot; alt=&quot;Diagram showing layers of the Clojure community&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the tail end of this year&amp;#8217;s &lt;a href=&quot;http://clojure-conj.org/&quot;&gt;Clojure/conj&lt;/a&gt;, Stuart Halloway opened the first face-to-face meeting of Clojure/dev with these words: &quot;This is the Clojure/dev meeting. It&amp;#8217;s a meeting of volunteers talking about how they&amp;#8217;re going to spend their free time. The only thing we owe each other is honest communication about when we&amp;#8217;re planning to do something and when we&amp;#8217;re not. There is no obligation for anybody in this room to build anything for anybody else.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One consensus that came out of the Clojure/dev meeting was that we need to get better at using our tools, particularly JIRA. We would like to streamline the processes of joining Clojure/dev, screening patches, and creating new contrib libraries. We also need better integration testing between Clojure and applications that use it. Application and library developers can help by running their test suites against pre-release versions of Clojure (alphas, betas, even SNAPSHOTs) and reporting problems early.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But Stu&amp;#8217;s last point is an important one: no one in the Clojure community owes anybody anything. If you want something, it&amp;#8217;s not enough to ask for it, you need to be willing to do the work to make it happen. At the same time, don&amp;#8217;t let a lukewarm response to ideas on the mailing list dissuade you from implementing something you think is valuable. It might just be that no one has time to think about it. Recall keyword arguments: more than two years from inception to completion. We&amp;#8217;re in this for the long haul. Join us, be patient, and let&amp;#8217;s see where we can go.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Introducing ClojureScript</title>
      <link>http://igeldev.github.io/clojure-site-russian/news/2011/07/22/introducing-clojurescript.html</link>
      <pubDate>Fri, 22 Jul 2011 00:00:00 +0700</pubDate>
      <guid isPermaLink="false">news/2011/07/22/introducing-clojurescript.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Clojure team is proud to introduce an important addition to the Clojure language ecosystem. &lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt; is a new compiler for Clojure that targets JavaScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;a href=&quot;https://www.youtube.com/watch?v=tVooR-dF_Ag&quot;&gt;video recording of the ClojureScript announcement&lt;/a&gt; is available, along with &lt;a href=&quot;http://cloud.github.com/downloads/clojure/clojurescript/clojurescript%20slides.pdf&quot;&gt;slides (PDF) from the presentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_javascript&quot;&gt;Why JavaScript&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Clojure language was first &lt;a href=&quot;xref/../../../../../about/rationale#Rationale-Languages%20and%20Platforms&quot;&gt;built on the Java Virtual Machine&lt;/a&gt; because of its reach and power on server platforms. For non-server platforms, nothing has greater reach than JavaScript. It&amp;#8217;s been called the &lt;a href=&quot;http://www.hanselman.com/blog/JavaScriptisAssemblyLanguagefortheWebPart2MadnessorjustInsanity.aspx&quot;&gt;assembly language of the Web&lt;/a&gt;. But beyond Web browsers, JavaScript can be found in &lt;a href=&quot;http://arstechnica.com/apple/news/2011/06/ios-5-brings-nitro-speed-to-home-screen-web-apps.ars&quot;&gt;mobile devices&lt;/a&gt;, &lt;a href=&quot;http://developer.boxee.tv/JavaScript_API#Preface&quot;&gt;set-top boxes&lt;/a&gt;, and &lt;a href=&quot;http://wiki.services.openoffice.org/wiki/Documentation/DevGuide/Scripting/Scripting_Framework&quot;&gt;desktop applications&lt;/a&gt;. JavaScript has even made inroads on the server in &lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;databases&lt;/a&gt; and &lt;a href=&quot;http://nodejs.org/&quot;&gt;Web servers&lt;/a&gt;. As a result of this reach, a lot of work has gone into making JavaScript engines performant, including JIT-compilation into native code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But JavaScript&amp;#8217;s weakness remains the language itself. Although it has some powerful features such as first-class functions, JavaScript is noted more for its flaws than for its strengths. It was never designed to be a language for large applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if we had a modern, robust, powerful language that could reach to all the places that JavaScript does? This is the goal of ClojureScript.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_where_we_are&quot;&gt;Where We Are&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Try it out!  Follow the Quick Start instructions on the &lt;a href=&quot;https://github.com/clojure/clojurescript/wiki&quot;&gt;ClojureScript wiki&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a partial list of what has been implemented so far:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Protocols and &lt;code&gt;deftype&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Namespaces&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions: &lt;code&gt;fn&lt;/code&gt;, &lt;code&gt;defn&lt;/code&gt;, multiple-arities, variadics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Destructuring&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Higher-order functions: &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data structures: lists, maps, vectors, sets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data manipulation functions: &lt;code&gt;conj&lt;/code&gt;, &lt;code&gt;assoc&lt;/code&gt;, &lt;code&gt;update-in&lt;/code&gt;,&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sequences and sequence functions: &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;rest&lt;/code&gt;, &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macros: &lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;cond&lt;/code&gt;, &lt;code&gt;doto&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;-&amp;gt;&lt;/code&gt; and &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;, &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metadata&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reader in ClojureScript (think JSON but better)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regular expressions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atoms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Core libraries: &lt;code&gt;clojure.string&lt;/code&gt;, &lt;code&gt;clojure.set&lt;/code&gt;, &lt;code&gt;clojure.zip&lt;/code&gt;, &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REPL using JDK-embedded JavaScript (Rhino)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ClojureScript is currently in Alpha status. The compiler and core libraries are usable for developing applications, but expect to find bugs and missing pieces of functionality. ClojureScript aims to be a complete implementation of the Clojure language, but some parts aren&amp;#8217;t finished yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some parts of the Clojure language have no direct analog in ClojureScript, in particular the concurrency primitives, since JavaScript is single-threaded. There may also be edge cases where the requirements of the JavaScript environment force ClojureScript to have slightly different semantics from Clojure. We will document these differences as we find them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, any code making interop calls to Java, as most existing Clojure libraries do, will not work in ClojureScript. Code written in pure Clojure will &lt;strong&gt;probably&lt;/strong&gt; work in ClojureScript with minor adjustments. For example, &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/clj/clojure/zip.clj&quot;&gt;clojure.zip in Clojure&lt;/a&gt; and &lt;a href=&quot;https://github.com/clojure/clojurescript/blob/master/src/cljs/clojure/zip.cljs&quot;&gt;clojure.zip in ClojureScript&lt;/a&gt; are nearly identical. With a little effort, purely algorithmic code can be made portable between implementations. However, trying to abstract over all the differences among host platforms has never been a goal of Clojure, nor will it be a goal of ClojureScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a &lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS&quot;&gt;ClojureScript JIRA instance&lt;/a&gt; set up to track bugs. As with Clojure itself, submitting patches requires signing the &lt;a href=&quot;xref/../../../../../community/contributing&quot;&gt;Clojure Contributor Agreement&lt;/a&gt;. We can only accept patches through JIRA, not GitHub pull requests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_relationship_to_google_closure&quot;&gt;The Relationship to Google Closure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google has led the way in developing rich client-side applications in JavaScript. Because Google needs the Web to succeed as an application-delivery platform, they have released some of their JavaScript tools as open source under the name &lt;strong&gt;Closure&lt;/strong&gt;. The homophonic name clash is unfortunate, but not something we can do anything about.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://code.google.com/closure/&quot;&gt;Google Closure&lt;/a&gt; is a suite of tools for delivering complex JavaScript applications to memory-constrained devices over slow connections. It consists of three parts: a large library of JavaScript classes and functions, a client-side templating system, and an optimizing JavaScript compiler. These parts are designed to work in symbiosis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Google Closure compiler is a sophisticated JavaScript-to-JavaScript compiler that performs whole-program analysis to inline and rearrange code for optimal performance on modern JavaScript runtimes. Most importantly, it eliminates unused or unreachable code. The Google Closure compiler makes it possible to have a large library of JavaScript functions written in a straightforward manner without concern for code size, and to deliver minified versions of only the code your application needs. However, taking full advantage of the Google Closure compiler requires adherence to strict conventions for JavaScript source code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ClojureScript compiler emits JavaScript which follows Google Closure&amp;#8217;s code conventions, and then invokes the Google Closure compiler to generate compact, optimized JavaScript for delivery to clients. ClojureScript also makes use of the Google Closure library for capabilities such as event handling, DOM manipulation, and user interface widgets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to use ClojureScript with JavaScript libraries other than Google Closure, but those libraries typically do not follow the conventions of the Google Closure compiler and therefore will not be able to take full advantage of its optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_clojurescript_is_not&quot;&gt;What ClojureScript is Not&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;ClojureScript is not Clojure implemented in JavaScript.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Clojure community has tried various ways of generating JavaScript from Clojure in the past. One &lt;a href=&quot;https://github.com/clojure/clojure-contrib/tree/master/clojurescript&quot;&gt;early attempt by Chris Houser&lt;/a&gt;, also called ClojureScript, used JavaScript as a implementation language for the core data structures and compiler, the way the current version of Clojure uses Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new ClojureScript does not take this approach. Instead, ClojureScript is written entirely in &lt;strong&gt;Clojure&lt;/strong&gt;, as a compiler which emits JavaScript and a large library of functions. Therefore, ClojureScript does not aim to provide a complete development environment in JavaScript. There is no &lt;code&gt;eval&lt;/code&gt; and no runtime access to the ClojureScript compiler from within ClojureScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;ClojureScript is not JavaScript with Clojure syntax.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another approach sometimes used to overcome JavaScript&amp;#8217;s syntactic shortcomings is to layer another syntax on top of it while keeping all of the JavaScript language semantics. &lt;a href=&quot;http://common-lisp.net/project/parenscript/&quot;&gt;Parenscript&lt;/a&gt; and &lt;a href=&quot;http://jashkenas.github.com/coffee-script/&quot;&gt;CoffeeScript&lt;/a&gt; are examples of this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ClojureScript has the same language semantics as Clojure, not JavaScript. The ClojureScript compiler emits JavaScript, similar to the way the Clojure compiler emits Java bytecode.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_we_got_here&quot;&gt;How We Got Here&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ClojureScript was initially developed by Rich Hickey, creator of Clojure. Members of the Clojure/core team, along with others invited from the Clojure community, have participated in the development of the compiler.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_where_to_learn_more&quot;&gt;Where to Learn More&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/clojurescript/wiki&quot;&gt;ClojureScript Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/clojure&quot;&gt;Clojure Mailing List&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\#clojure IRC on &lt;a href=&quot;http://freenode.net/&quot;&gt;Freenode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
